// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lumduan
//@version=6

// For S50 TFEX Strategy Timeframe 30 minutes 
import candythink/MonthlyProfitTable/5 as MonthlyProfitTable   	

// ————— Constants
float RISK_FREE_RATE = 2.0 // Risk-free rate for calculating Sharpe ratio
high_price_bar_color = color.green
low_price_bar_color = color.red
int high_price_bar_width = 1
int low_price_bar_width = 1

int contact_per_order = 1
float commission_price = 85.0 //THB

// Inputs for configuring the pivot point calculation
int left_bars = input(21) // Number of bars to the left for pivot calculation
int right_bars = input(2) // Number of bars to the right for pivot calculation
int risk_percent = input(1, title="Risk % per Trade") / 100
int atr_length = input(10, title="ATR Length")
int risk_reward_ratio = input(8, title="Risk-Reward Ratio")
int adx_length = input(14, title="ADX Length")
float adx_threshold = input(25.0, title="ADX Threshold")
int prec      = input(2, title = "Return Precision") // Precision of return percentages
bool show_table = input.bool(defval = true, title = "Show Return Rate Table On/Off") // Show or hide the table

strategy(title = "S50 TFEX Trend Following Breakout",overlay = true, calc_on_every_tick = true, default_qty_type = strategy.fixed, default_qty_value = contact_per_order, commission_type = strategy.commission.cash_per_contract, commission_value = commission_price , risk_free_rate = RISK_FREE_RATE)

// ATR Calculation
atr = ta.atr(atr_length)

// ADX Calculation using DMI
[diplus, diminus, adx] = ta.dmi(adx_length, adx_length)

// Account Equity & Risk Per Trade
strategy_equity = strategy.equity
risk_amount = strategy_equity * risk_percent

// swing
swing_high = ta.pivothigh(left_bars, right_bars)
swing_low = ta.pivotlow(left_bars, right_bars)

// Initialize high and low price variables
float high_price = 0.0
high_price := not na(swing_high) ? swing_high : high_price[1] // Update high price if a new swing high is detected, else carry forward previous value

float low_price = 0.0
low_price := not na(swing_low) ? swing_low : low_price[1] // Update low price if a new swing low is detected, else carry forward previous value

// Stop-Loss and Take-Profit Calculation
long_stop = swing_low - atr
short_stop = swing_high + atr

long_take_profit = swing_high + atr * risk_reward_ratio
short_take_profit = swing_low - atr * risk_reward_ratio

// Position Sizing: Contracts based on risk
long_contracts = risk_amount / (swing_high - long_stop)
short_contracts = risk_amount / (short_stop - swing_low)

is_long = false
is_short = false

is_long := high[0] > high_price
is_short := low[0] < low_price

// Long Entry with ADX filter
// if not na(swing_high)
if is_long and adx > adx_threshold
    strategy.entry("Long", strategy.long, qty=long_contracts, stop=swing_high + syminfo.mintick, comment = "Long")
    strategy.exit("Long Exit", from_entry="Long", stop=long_stop, limit=long_take_profit, comment = "Short")

// Short Entry with ADX filter
// if not na(swing_low)
if is_short and adx > adx_threshold
    strategy.entry("Short", strategy.short, qty=short_contracts, stop=swing_low - syminfo.mintick, comment = "Short")
    strategy.exit("Short Exit", from_entry="Short", stop=short_stop, limit=short_take_profit, comment = "Long")

// Plot high and low prices on the chart
plot(high_price, color = high_price_bar_color, linewidth = high_price_bar_width)
plot(low_price, color = low_price_bar_color, linewidth = low_price_bar_width)

// Plot Take Profit
plot(high_price + atr * risk_reward_ratio, title="Long Take-Profit", color=color.rgb(0, 240, 164, 50), linewidth=1, style=plot.style_stepline)
plot(low_price - atr * risk_reward_ratio, title="Short Take-Profit", color=color.rgb(0, 240, 164, 50), linewidth=1, style=plot.style_stepline)


// ======= TABLE =====
float equity = strategy.equity
MonthlyProfitTable.ProfitTable(equity)